[{"C:\\Users\\nicka\\homeWork\\chatbot\\src\\App.js":"1","C:\\Users\\nicka\\homeWork\\chatbot\\src\\reportWebVitals.js":"2","C:\\Users\\nicka\\homeWork\\chatbot\\src\\components\\Chatbot\\index.js":"3","C:\\Users\\nicka\\homeWork\\chatbot\\src\\index.js":"4"},{"size":3221,"mtime":1606299697517,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":9233,"mtime":1606335756248,"results":"8","hashOfConfig":"6"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9occ5s",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\nicka\\homeWork\\chatbot\\src\\App.js",[],"C:\\Users\\nicka\\homeWork\\chatbot\\src\\reportWebVitals.js",[],"C:\\Users\\nicka\\homeWork\\chatbot\\src\\components\\Chatbot\\index.js",["19"],"import React, {useState, useEffect} from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faComments, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { animateScroll } from 'react-scroll';\r\nimport AnimateHeight from 'react-animate-height';\r\nimport './style.scss';\r\n\r\nconst tutors = [\r\n  {\r\n    name: 'Nick',\r\n    avatar: '👦',\r\n    email: 'nick@email.com',\r\n    age: ['8-10', '11-12', '13-15'],\r\n    proficiency: [3,4,5],\r\n    focus: ['Academic', 'Colloquial'],\r\n    gender: ['Man', 'No Preference'],\r\n    schedule: ['M/W/F', 'T/R']\r\n  },\r\n  {\r\n    name: 'Jo',\r\n    avatar: '👩🏾',\r\n    email: 'jo@email.com',\r\n    age: ['5-7','8-10', '11-12'],\r\n    proficiency: [1,2,3,4,5],\r\n    focus: ['Academic', 'Colloquial'],\r\n    gender: ['Woman', 'No Preference'],\r\n    schedule: ['M/W/F', 'Sat/Sun']\r\n  },\r\n  {\r\n    name: 'Dan',\r\n    avatar: '👨🏻',\r\n    email: 'dan@email.com',\r\n    age: ['5-7', '11-12', '13-15'],\r\n    proficiency: [1,2,3,4],\r\n    focus: ['Academic', 'Colloquial'],\r\n    gender: ['Man', 'No Preference'],\r\n    schedule: ['M/W/F', 'Sat/Sun', 'T/R']\r\n  },\r\n  {\r\n    name: 'Sally',\r\n    avatar: '👱🏻‍♀️',\r\n    email: 'sally@email.com',\r\n    age: ['5-7', '8-10', '11-12', '13-15'],\r\n    proficiency: [1,2,3,4,5],\r\n    focus: ['Academic', 'Colloquial'],\r\n    gender: ['Woman', 'No Preference'],\r\n    schedule: ['Sat/Sun', 'T/R']\r\n  },\r\n  {\r\n    name: 'Ja',\r\n    avatar: '🧑🏿',\r\n    email: 'ja@email.com',\r\n    age: ['5-7', '8-10', '11-12'],\r\n    proficiency: [1,2,3,4,5],\r\n    focus: ['Academic', 'Colloquial'],\r\n    gender: ['Man', 'No Preference'],\r\n    schedule: ['Sat/Sun', 'T/R']\r\n  },\r\n  {\r\n    name: 'Randy',\r\n    avatar: '🧔',\r\n    email: 'randy@email.com',\r\n    age: ['5-7', '8-10', '11-12', '13-15'],\r\n    proficiency: [1,2,3,4,5],\r\n    focus: ['Academic', 'Colloquial'],\r\n    gender: ['Man', 'No Preference'],\r\n    schedule: ['Sat/Sun', 'T/R', 'M/W/F']\r\n  },\r\n  {\r\n    name: 'Carla',\r\n    avatar: '👩‍🦰',\r\n    email: 'carla@email.com',\r\n    age: ['5-7', '8-10', '11-12', '13-15'],\r\n    proficiency: [1,2,3,4,5],\r\n    focus: ['Academic', 'Colloquial'],\r\n    gender: ['Woman', 'No Preference'],\r\n    schedule: ['Sat/Sun', 'T/R', 'M/W/F']\r\n  }\r\n];\r\n\r\nconst questions = [\r\n  {\r\n    question: \"How old is your child?\",\r\n    title: \"age\",\r\n    options: ['5-7', '8-10', '11-12', '13-15']\r\n  },\r\n  {\r\n    question: \"On a scale of 1 to 5, 5 being the best, how would you rate your child's English proficiency?\",\r\n    title: \"proficiency\",\r\n    options: [1,2,3,4,5]\r\n  },\r\n  {\r\n    question: \"What area of English do you want your child to focus on?\",\r\n    title: \"focus\",\r\n    options: ['Academic', 'Colloquial']\r\n  },\r\n  {\r\n    question: \"Do you or your child have a gender preference for their teacher?\",\r\n    title: \"gender\",\r\n    options: ['Man', 'Woman', 'No Preference']\r\n  },\r\n  {\r\n    question: \"Which class days best fit your schedule?\",\r\n    title: \"schedule\",\r\n    options: ['M/W/F', 'T/R', 'Sat/Sun']\r\n  }\r\n];\r\n\r\nexport default function Chatbot(props) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isSpinning, setSpinning] = useState(false);\r\n  const [nextLoaded, setNextLoaded] = useState(false);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [currentQ, setCurrentQ] = useState(0);\r\n  const [history, setHistory] = useState([]);\r\n  const [results, setResults] = useState({});\r\n  const [matches, setMatches] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    if(nextLoaded){\r\n      animateScroll.scrollToBottom({\r\n        containerId: \"Chat-message-container\"\r\n      });\r\n    }\r\n  },[nextLoaded]);\r\n\r\n  useEffect(()=>{\r\n    if(isActive === true){\r\n      setTimeout(()=>{\r\n        setNextLoaded(true);\r\n      },2000);\r\n    }\r\n    if(results !== {}){\r\n      getResults();\r\n    }\r\n  },[isActive]);\r\n\r\n  const toggleShowing = () => {\r\n    setSpinning(true);\r\n    setIsOpen(!isOpen);\r\n    setTimeout(()=>{\r\n      setSpinning(false)\r\n    }, 2000);\r\n  };\r\n\r\n  const startOver = () => {\r\n    setCurrentQ(0);\r\n    setHistory([]);\r\n    setMatches([]);\r\n    setResults({});\r\n    setIsActive(true);\r\n  };\r\n\r\n  const getResults = () => {\r\n    let possibles = tutors.filter(i=>(\r\n      i.age.includes(results.age) &&\r\n      i.gender.includes(results.gender) &&\r\n      i.proficiency.includes(parseInt(results.proficiency)) &&\r\n      i.focus.includes(results.focus) &&\r\n      i.schedule.includes(results.schedule)\r\n    ));\r\n    setMatches(possibles);\r\n  };\r\n\r\n  const answerQuestion = (e) => {\r\n    let current = questions[currentQ];\r\n    let value = e.target.dataset.value;\r\n    if(e.target){\r\n      setResults({...results, [current.title]: value});\r\n      setHistory([...history, {question: current.question, answer: value}]);\r\n    }\r\n    if(currentQ <= questions.length -1){\r\n      setNextLoaded(false);\r\n      setCurrentQ(currentQ + 1);\r\n      setTimeout(()=>{\r\n        setNextLoaded(true);\r\n      }, 2000);\r\n    }\r\n    if(currentQ >= questions.length - 1){\r\n      setTimeout(()=>{\r\n        setIsActive(false)\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Chatbot\">\r\n      <AnimateHeight\r\n        duration={500}\r\n        height={isOpen ? \"auto\" : '0%'}\r\n        className=\"Chat\"\r\n      >\r\n        <div className=\"Chat-content\">\r\n          <div className=\"Chat-heading-container\">\r\n            <p className=\"Chat-heading\">🤖Chat With DoDobot🤖</p>\r\n            <div className=\"Chat-heading-close\" onClick={toggleShowing}>\r\n              <FontAwesomeIcon icon={faTimes} />\r\n            </div>\r\n          </div>\r\n          <div className=\"Chat-message-container\" id=\"Chat-message-container\">\r\n              {/* {!isActive &&  */}\r\n            <AnimateHeight\r\n              duration={500}\r\n              height={!isActive ? '105%' : '0'}\r\n              className={`Chat-overlay`}\r\n            >\r\n              <div>\r\n                {(!history.length ? \r\n                  <>\r\n                    <p>Hi 👋</p>\r\n                    <p>Answering a few questions will help us match your child with a tutor.</p>\r\n                    <button className=\"overlay-button\" onClick={()=>setIsActive(true)}>\r\n                      Let's get started!🚀\r\n                    </button>\r\n                  </>\r\n                : \r\n                  <>\r\n                    {matches.length && <p>{matches.length === 1 ? \"You have a match!\" : \"You have matches!\"}🎉</p>}\r\n                    {\r\n                      matches.length ?\r\n                      <>\r\n                        <p>Here is how to contact your potential teachers:</p>\r\n                        <ul>\r\n                        {matches.map((i,idx)=>(\r\n                          <li key={`match-${idx}`}>\r\n                            {i.avatar}{' '}{i.name}:{' '}<a href={`mailto:${i.email}`}>{i.email}</a>\r\n                          </li>\r\n                        ))}\r\n                        </ul>\r\n                      </>\r\n                    :\r\n                      <p>No matches to show 😭</p>\r\n                    }\r\n                    <button className=\"overlay-button\" onClick={startOver}>\r\n                      Start over 🔙\r\n                    </button>\r\n                  </>\r\n                )}\r\n              </div>\r\n            </AnimateHeight>\r\n              {/* } */}\r\n            {history.map((i, idx) => (\r\n              <div className=\"Chat-pair\" key={`history-${idx}`}>\r\n                <div className=\"clearfix\">\r\n                  <span className=\"Chat-question clearfix\" key={`history-q-${idx}`}>\r\n                    {i.question}\r\n                  </span>\r\n                </div>\r\n                <div className=\"clearfix\">\r\n                  <span className=\"Chat-answer clearfix\" key={`history-a-${idx}`}>\r\n                    {i.answer}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n            {currentQ < questions.length ? (\r\n              nextLoaded ? (\r\n                <div className=\"Chat-question\">\r\n                  {questions[currentQ].question}\r\n                </div>\r\n              ) : (\r\n                <div className=\"Chat-question\">\r\n                  <div className=\"loading\"></div>\r\n                </div>\r\n              )\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {currentQ < questions.length ? (\r\n              <>\r\n                <div className=\"Chat-option-container\" id=\"option-container\">\r\n                  {questions[currentQ].options.map(\r\n                    (i, idx) =>\r\n                      nextLoaded && (\r\n                        <span\r\n                          data-value={i}\r\n                          className=\"Chat-option\"\r\n                          key={`q${currentQ}option${idx}`}\r\n                          onClick={answerQuestion}\r\n                        >\r\n                          {i}\r\n                        </span>\r\n                      )\r\n                  )}\r\n                </div>\r\n              </>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      </AnimateHeight>\r\n      <div className=\"Chat-icon-container\" onClick={toggleShowing}>\r\n        <FontAwesomeIcon icon={faComments} spin={isSpinning} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\nicka\\homeWork\\chatbot\\src\\index.js",[],{"ruleId":"20","severity":1,"message":"21","line":136,"column":5,"nodeType":"22","endLine":136,"endColumn":15,"suggestions":"23"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getResults' and 'results'. Either include them or remove the dependency array.","ArrayExpression",["24"],{"desc":"25","fix":"26"},"Update the dependencies array to be: [getResults, isActive, results]",{"range":"27","text":"28"},[3775,3785],"[getResults, isActive, results]"]